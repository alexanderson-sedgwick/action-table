{
    "project": {
        "name": "action-table",
        "description": "Moderately simple Service Portal widget made for data source flexibility",
        "version": "1.0.0",
        "url": "https://github.com/alexanderson-sedgwick/action-table#readme"
    },
    "files": {
        "providers\\spglideajax.js": {
            "name": "providers\\spglideajax.js",
            "modules": {},
            "classes": {
                "SPGlideAjax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\include.js": {
            "name": "scripts\\include.js",
            "modules": {},
            "classes": {
                "ActionTableScriptAPI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "widget\\client.js": {
            "name": "widget\\client.js",
            "modules": {},
            "classes": {
                "ActionTableController": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "AngularProviders": {
            "name": "AngularProviders",
            "submodules": {
                "Service": 1
            },
            "elements": {},
            "classes": {
                "SPGlideAjax": 1,
                "ActionTableScriptAPI": 1,
                "ActionTableController": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "widget\\client.js",
            "line": 2
        },
        "Service": {
            "name": "Service",
            "submodules": {},
            "elements": {},
            "classes": {
                "SPGlideAjax": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "AngularProviders",
            "namespace": "",
            "description": "A simplified version of GlideAJAX for use within the Service Portal.\n\nThis specifically implements getAnswer and getXMLAnswer with some modernization\nfor Promise support through Angular's $http service.",
            "file": "providers\\spglideajax.js",
            "line": 2
        }
    },
    "classes": {
        "SPGlideAjax": {
            "name": "SPGlideAjax",
            "shortname": "SPGlideAjax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AngularProviders",
            "file": "providers\\spglideajax.js",
            "line": 2,
            "description": "A simplified version of GlideAJAX for use within the Service Portal.\n\nThis specifically implements getAnswer and getXMLAnswer with some modernization\nfor Promise support through Angular's $http service.",
            "submodule": "Service",
            "is_constructor": 1,
            "params": [
                {
                    "name": "$http",
                    "description": "",
                    "type": "$http"
                }
            ],
            "example": [
                "\nExample Script Include Declaration:\n```javascript\nvar Example = Class.create();\nExample.prototype = Object.extendsObject(AbstractAjaxProcessor, {\n\t\"type\": \"Example\",\n\t\"functionA\": function() {\n\t\treturn this.getParameter(\"a\");\n\t}\n});\n```\n\nExample usage of SPGlideAjax:\n(This will print \"9\" as a warning to the browser's console)\n```javascript\n function _controller($scope, SPGlideAjax) {\n \tvar ga = new SPGlideAjax(\"Example\");\n \tga.addParam(\"sysparm_name\", \"functionA\");\n \tga.addParam(\"a\", 9);\n \tga.getXMLAnswer(console.warn);\n }\n```"
            ]
        },
        "ActionTableScriptAPI": {
            "name": "ActionTableScriptAPI",
            "shortname": "ActionTableScriptAPI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AngularProviders",
            "namespace": "",
            "file": "scripts\\include.js",
            "line": 2,
            "description": "Extending this class instead of AbstractAjaxProcessor is not necessary from a\n functionality perspective, but does help to track or imply why that script\n exists.",
            "is_constructor": 1
        },
        "ActionTableController": {
            "name": "ActionTableController",
            "shortname": "ActionTableController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AngularProviders",
            "namespace": "",
            "file": "widget\\client.js",
            "line": 2,
            "description": "The Angular controller for managing the Action Table",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "providers\\spglideajax.js",
            "line": 36,
            "description": "Static space reference for quick replacement.",
            "itemtype": "property",
            "name": "regexSpace",
            "type": "RegExp",
            "priavte": "",
            "static": 1,
            "class": "SPGlideAjax",
            "module": "AngularProviders",
            "submodule": "Service"
        },
        {
            "file": "providers\\spglideajax.js",
            "line": 45,
            "description": "Service-Now's GlideAjax works with form data strings instead of JSON,\nso this is used to convert the parameters to the appropriate format.",
            "itemtype": "method",
            "name": "serializeToForm",
            "priavte": "",
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The object to parse into form data. The values off the object\n\t\tshould be easily represented as strings or issues may occur.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Form data string of the data in the passed object",
                "type": "String"
            },
            "class": "SPGlideAjax",
            "module": "AngularProviders",
            "submodule": "Service"
        },
        {
            "file": "providers\\spglideajax.js",
            "line": 67,
            "description": "General options to use with all $HTTP calls",
            "itemtype": "property",
            "name": "generalOptions",
            "type": "Object",
            "priavte": "",
            "static": 1,
            "class": "SPGlideAjax",
            "module": "AngularProviders",
            "submodule": "Service"
        },
        {
            "file": "providers\\spglideajax.js",
            "line": 88,
            "description": "Uses the parameters object to handle processing.\n\nIf the sysparm_name property is missing, a warning is sent to the\nconsole for developer awareness.",
            "itemtype": "method",
            "name": "getAnswer",
            "params": [
                {
                    "name": "callback",
                    "description": "Takes callback(answer, error) and resolves appropriately\n\t\tthe same as the returned promise.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The promise resolves with the answer XML element on\n\t\tsuccess or an Error object on failure.",
                "type": "Promise"
            },
            "class": "SPGlideAjax",
            "module": "AngularProviders",
            "submodule": "Service"
        },
        {
            "file": "providers\\spglideajax.js",
            "line": 123,
            "description": "Sets a parameter for a pending AJAX request.",
            "itemtype": "method",
            "name": "addParam",
            "params": [
                {
                    "name": "field",
                    "description": "The name of the field to be passed.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to be passed for that field.",
                    "type": "String"
                }
            ],
            "class": "SPGlideAjax",
            "module": "AngularProviders",
            "submodule": "Service"
        },
        {
            "file": "providers\\spglideajax.js",
            "line": 133,
            "description": "Get the answer property from the returned XML.",
            "itemtype": "method",
            "name": "getXMLAnswer",
            "params": [
                {
                    "name": "callback",
                    "description": "Takes callback(answer, error) and resolves appropriately\n\t\tthe same as the returned promise.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Resolves on success with the answer string and on failure\n\t\tthrows to the catch chain.",
                "type": "Promise"
            },
            "class": "SPGlideAjax",
            "module": "AngularProviders",
            "submodule": "Service"
        },
        {
            "file": "scripts\\include.js",
            "line": 18,
            "description": "Takes a general query and flushes out the record data with field descriptors.",
            "itemtype": "method",
            "name": "finishQuery",
            "static": 1,
            "params": [
                {
                    "name": "queried",
                    "description": "That has the search parameters entered and `query()`\n\t\thas been called.",
                    "type": "GlideRecord"
                }
            ],
            "return": {
                "description": "With",
                "type": "Array"
            },
            "class": "ActionTableScriptAPI",
            "module": "AngularProviders"
        },
        {
            "file": "scripts\\include.js",
            "line": 49,
            "itemtype": "method",
            "name": "getFieldDescription",
            "static": 1,
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "GlideRecord"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "With properties; display_value, value, type, label",
                "type": "Object"
            },
            "class": "ActionTableScriptAPI",
            "module": "AngularProviders"
        },
        {
            "file": "scripts\\include.js",
            "line": 73,
            "description": "Convert a GlideRecord's data to JSON.\n\nThis method does _NOT_ use `getFieldDescription` as that isn't the expected mode for\nthe ActionTable widget. If looking for more flushed out data, use the `finishQuery`\nmethod instead.",
            "itemtype": "method",
            "name": "toJSON",
            "static": 1,
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "GlideRecord"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ActionTableScriptAPI",
            "module": "AngularProviders"
        },
        {
            "file": "scripts\\include.js",
            "line": 104,
            "description": "Pull general data from a table.",
            "itemtype": "method",
            "name": "getTableData",
            "params": [
                {
                    "name": "table",
                    "description": "To query",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "Encoded Query to pass into the query.",
                    "type": "String"
                },
                {
                    "name": "page_size",
                    "description": "Optional limiter for number of rows to retrieve.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "page",
                    "description": "Optional offset for getting a specific page of data.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Of records.",
                "type": "Array"
            },
            "class": "ActionTableScriptAPI",
            "module": "AngularProviders"
        },
        {
            "file": "scripts\\include.js",
            "line": 133,
            "description": "Returns non-persistent random data; If a page is requested twice, the data will not be the same.\n\nUses page_size to gauge the amount of data to generate.",
            "itemtype": "method",
            "name": "getExampleData",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "page_size",
                    "description": "Defaults to 30",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Length either 5 * page_size or 30 of semi-random.",
                "type": "Array"
            },
            "class": "ActionTableScriptAPI",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 7,
            "description": "Identitifies the localStorage key used for saving and recovering the current state\nof the table's rendering.",
            "itemtype": "property",
            "name": "stateKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 14,
            "description": "Time to wait to allow typing to continue before updating the corpus.",
            "itemtype": "property",
            "name": "filterInterval",
            "default": "200",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 41,
            "description": "Save an encoded value of the scope's state value to give persistence to the table's\nrendering.",
            "itemtype": "method",
            "name": "saveState",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 50,
            "description": "Updates the icons for various objects for cached rendering purposes",
            "itemtype": "method",
            "name": "setIcons",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 73,
            "description": "Sorting function used to sort the data.rows array based on the current state values.",
            "itemtype": "method",
            "name": "sortData",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 97,
            "itemtype": "method",
            "name": "visible",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 105,
            "description": "Timed function used to balance user typing with when to fire updating the results.",
            "itemtype": "method",
            "name": "filtering",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 125,
            "description": "Used to keep the data up to date if a refresh interval has been specified.",
            "itemtype": "method",
            "name": "refresh",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 136,
            "description": "Waits 1 second to reset the reload icon to give the visual impact time.",
            "itemtype": "method",
            "name": "endReload",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 147,
            "description": "Use template filling to create a new object whose values mimic the fill object but\nwith templates completed based on the row. Due to the regular expressions in volved\nand the number of search/replacements that can be triggered here, this method should\nbe used sparingly.",
            "itemtype": "method",
            "name": "fillin",
            "params": [
                {
                    "name": "fill",
                    "description": "Object whose values are to be completed",
                    "type": "Object"
                },
                {
                    "name": "row",
                    "description": "Source for values",
                    "type": "Object"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 165,
            "description": "Internal method for displaying an error that was encountered.",
            "itemtype": "method",
            "name": "fault",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "That occurred and should be displayed",
                    "type": "Error"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 184,
            "description": "Internal method for clearing an error that had been encountered if one such error exists.",
            "itemtype": "method",
            "name": "clearFault",
            "access": "private",
            "tagname": "",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 195,
            "description": "Updates the fieldTracking & fieldList properties.",
            "itemtype": "method",
            "name": "mapDataFields",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 211,
            "description": "Checks the object keys to ensure that all fields have a RegExp mapping in the `fieldTracking`\nobject.",
            "itemtype": "method",
            "name": "mapFields",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 241,
            "description": "Handles displaying an error to the widget.\n\nGenerally set by calling the private function `fault`.",
            "itemtype": "property",
            "name": "error",
            "type": "Error",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 251,
            "description": "The displayed icon in the filter to give feedback to the user.",
            "itemtype": "property",
            "name": "filterIcon",
            "type": "String",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 258,
            "description": "The displayed icon for reloading data to give feedback to the user.",
            "itemtype": "property",
            "name": "filterIcon",
            "type": "String",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 264,
            "description": "Each element contained here is an element that is valid after the rows have been\nfiltered by search and sort criteria.",
            "itemtype": "property",
            "name": "corpus",
            "type": "Array",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 271,
            "description": "Each element contained here is a row to render on the page. This is pared down to\nonly the rows that should render based on the current page and sourced from the\ncorpus array to follow search and sort criteria and drive a faster rendering.",
            "itemtype": "property",
            "name": "render",
            "type": "Array",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 279,
            "description": "Doubles as a page count and rendering array for ng-repeat.",
            "itemtype": "property",
            "name": "pages",
            "type": "Array",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 287,
            "itemtype": "property",
            "name": "state",
            "type": "Object",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 302,
            "itemtype": "property",
            "name": "state.page",
            "type": "Number",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 310,
            "description": "Used for filtering a row based on the values within it.",
            "itemtype": "property",
            "name": "state.search",
            "type": "String",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 318,
            "description": "The number of rows to display per page.",
            "itemtype": "property",
            "name": "state.size",
            "type": "Number",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 328,
            "description": "As \"select\" elements match on strings, a string version of the `state.size`\nvalue is copied here used for user control of the paging size. This is later\nin a $watch statement to handle keeping size straight when changed this way.\n\nDirect modifications to `state.size` after the widget has been created will\nNOT currently be reflected back to this value.",
            "itemtype": "property",
            "name": "state.per_page",
            "type": "String",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 339,
            "description": "Names the column by which to sort rows using the field value of the column.\n\nIf the field does not exist, no ordering is explicitly performed.",
            "itemtype": "property",
            "name": "state.order",
            "type": "String",
            "defaul": "null",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 347,
            "description": "Controls the sort ordering and is returned when `a` is considered to precede `b`.",
            "itemtype": "property",
            "name": "state.above",
            "type": "Number",
            "default": "-1",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 356,
            "description": "Controls the sort ordering and is returned when `a` is considered to procede `b`.",
            "itemtype": "property",
            "name": "state.below",
            "type": "Number",
            "default": "1",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 386,
            "description": "Change the direction of sorting or the column to sort by.\n\nCalling on the currently sorted column toggles the sort direction.\n\nChanging to a new column does NOT change the sort direction.",
            "itemtype": "method",
            "name": "reorder",
            "params": [
                {
                    "name": "column",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 409,
            "description": "Retrieves data from the server if necessary.\n\nThis is essesntially a stepping method for AJAX sourced data as the other 2 sources\n(server script, and table) would already be populated here by the server initialization.\n\nThe SPGlideAjax is heavily favored for the ability to create new configurable data sources\nwithout modifying the widget or its supporting pieces while also keeping the creating of\nthe data in a more traditionally understood form, Script Includes, instead of passing the\ndata through a more web traditional method such as an API, where Scripted APIs may get\nheavier. Though support for such a process should be added and would also be handled here.",
            "itemtype": "method",
            "name": "loadData",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 463,
            "description": "Called for receiving the text portion of a request for data. All text is assumed to be a JSON\nobject with the general format:\n```\n{\n    \"rows\": [{\n        Object 1 Data...\n    }, {\n        Object 2 Data...\n    }, {\n        ...\n    {, \n        Object N Data...\n    }]\n}\n```\n\nAn object is used to allow for other information to be present on the API call for use later.",
            "itemtype": "method",
            "name": "receiveData",
            "params": [
                {
                    "name": "response",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 510,
            "description": "Essentially prepares the data received from the server.\n\nThis primarily involves setting the `$search` property for easy lower cased\nstring index checks for filtering based on the columns and `options.filterable`.\n\nAdditionally, the data objectis emitted on the root scope for other widgets to\nconsume if needed under the event \"ststable:data:[ID]\" where \"[ID]\" is the table's\nID specified in options. This allows another widget on the same page as the table\nto implement something akin to `$scope.$on(\"ststable:data:[ID]\", $scope.processAPIData)`\nto receive the data and perform any needed actions.",
            "itemtype": "method",
            "name": "loadData",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 566,
            "description": "Filter and sort the general data received from the server.\n\nThis serves as our cache for paging through the data set.",
            "itemtype": "method",
            "name": "loadCorpus",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 596,
            "description": "Load data from the `corpus` to the `render` array for the current page being viewed.",
            "itemtype": "method",
            "name": "loadRender",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 618,
            "description": "Sets the page and updates the `render` array for display via the `loadRender` method.",
            "itemtype": "method",
            "name": "toPage",
            "params": [
                {
                    "name": "page",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 629,
            "itemtype": "method",
            "name": "getPageClasses",
            "params": [
                {
                    "name": "page",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 643,
            "description": "Check if an action is visible based on its `condition` object.\n\nNo condition object indicates it is always visible.\n\nCondition checking is managed with the `checkConditions` function.",
            "itemtype": "method",
            "name": "actionVisible",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 661,
            "description": "Process an action object for a row.",
            "itemtype": "method",
            "name": "processAction",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 727,
            "description": "Get the string to display for the value in row under the column's field value.",
            "itemtype": "method",
            "name": "renderValue",
            "params": [
                {
                    "name": "row",
                    "description": "Of data from which to get the value to render.",
                    "type": "Object"
                },
                {
                    "name": "column",
                    "description": "Describing what data should be rendered.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "To place in the table",
                "type": "String"
            },
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 764,
            "description": "Using a Modal, show the status text for the row.",
            "itemtype": "method",
            "name": "viewStatusWarning",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 773,
            "description": "Performs basic token replacement in a string based on the values in the row object using \"{{...}}\" for replacement\nindicators.\n\nDue to service-now template processing, using \"${...}\" fails without oerly complicated syntax, for example\nan option value of \"My name is ${name}\" simply displays as \"My name is name\" and looking at the option value\nreceived to the widget, the value of that option will also be \"My name is name\" because Sevice-Now's templating\nhas already altered the value.\n\nAdditionally note that the replacement handling is managed with cached regular expressions generated at the start\nof this controller.",
            "itemtype": "method",
            "name": "completeTemplate",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "template",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 796,
            "description": "Every field in the condition that is defined must match the corresponding field value in the row, or the\ncheck fails.",
            "itemtype": "method",
            "name": "checkCondition",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "condition",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 813,
            "description": "Get a new array of data from the server and apply it to the current state and render.",
            "itemtype": "method",
            "name": "reloadData",
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 844,
            "itemtype": "method",
            "name": "getLastUpdateDisplay",
            "return": {
                "description": "0",
                "type": "String"
            },
            "class": "ActionTableController",
            "module": "AngularProviders"
        },
        {
            "file": "widget\\client.js",
            "line": 854,
            "description": "Forces a re-rendering of AngularJS bindings",
            "itemtype": "method",
            "name": "update",
            "class": "ActionTableController",
            "module": "AngularProviders"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: priavte",
            "line": " providers\\spglideajax.js:36"
        },
        {
            "message": "unknown tag: priavte",
            "line": " providers\\spglideajax.js:45"
        },
        {
            "message": "unknown tag: priavte",
            "line": " providers\\spglideajax.js:67"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " scripts\\include.js:49"
        },
        {
            "message": "unknown tag: defaul",
            "line": " widget\\client.js:339"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " widget\\client.js:629"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " widget\\client.js:773"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " widget\\client.js:796"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " widget\\client.js:844"
        }
    ]
}